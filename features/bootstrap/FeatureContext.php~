<?php

use Behat\Behat\Tester\Exception\PendingException;
use Behat\Behat\Context\Context;
use Behat\Gherkin\Node\PyStringNode;
use Behat\Gherkin\Node\TableNode;

/**
 * Defines application features from the specific context.
 */
class FeatureContext implements Context
{
   private $bookbeat;
	private $bookbeatjson;
	private $bookbeatlist;
	private $book;
	private $books;
	private $bookbeatsearch;
	
    /**
     * Initializes context.
     *
     * Every scenario gets its own context instance.
     * You can also pass arbitrary arguments to the
     * context constructor through behat.yml.
     */
    public function __construct()
    {
        $this->bookbeat = new BookBeat();
        $this->bookbeatjson = new BookBeatJSON();
        $this->bookbeatlist = new BookBeatList();
        $this->bookbeatsearch = new BookBeatSearch();
    }

    /**
     * @Given I am online
     */
    public function iAmOnline()
    {
        throw new PendingException();
    }

    /**
     * @Given I search for tools that can help my book sales
     */
    public function iSearchForToolsThatCanHelpMyBookSales()
    {
        throw new PendingException();
    }

    /**
     * @When I google search for bookbeat
     */
    public function iGoogleSearchForBookbeat()
    {
        throw new PendingException();
    }

    /**
     * @When I view the page
     */
    public function iViewThePage()
    {
        throw new PendingException();
    }

    /**
     * @Then I should have the bookbeat website describing its app
     */
    public function iShouldHaveTheBookbeatWebsiteDescribingItsApp()
    {
        throw new PendingException();
    }

    /**
     * @Given there is a :arg1, which is listed on Amazon
     */
    public function thereIsAWhichIsListedOnAmazon($arg1)
    {
        $this->bookbeat->setBookTitle($arg1);
    }

    /**
     * @When I view the BookBeat page
     */
    public function iViewTheBookbeatPage()
    {
        $this->bookbeat->viewBookbeatPage();
    }

    /**
     * @Then I should see :arg1
     */
    public function iShouldSee($arg1)
    {
        PHPUnit_Framework_Assert::assertSame(
            $arg1,
            $this->bookbeat->getBookTitle()
        );
    }

    /**
     * @Then I should see the Amazon sales rank of greater than :arg1
     */
    public function iShouldSeeTheAmazonSalesRankOfGreaterThan($arg1)
    {
        PHPUnit_Framework_Assert::assertGreaterThan(
            $arg1,
            $this->bookbeat->getSalesRank()
        );
    }

    /**
     * @Then I should see the number of reviews of :arg1 or greater
     */
    public function iShouldSeeTheNumberOfReviewsOfOrGreater($arg1)
    {
        PHPUnit_Framework_Assert::assertGreaterThanOrEqual(
            $arg1,
            $this->bookbeat->getNumReviews()
        );
    }

    /**
     * @Then I should see the average rating of greater or equal than :arg1 and less or equal :arg2
     */
    public function iShouldSeeTheAverageRatingOfGreaterOrEqualThanAndLessOrEqual($arg1, $arg2)
    {
        PHPUnit_Framework_Assert::assertGreaterThanOrEqual(
            $arg1,
            $this->bookbeat->getAvgRating()
        );
        PHPUnit_Framework_Assert::assertLessThanOrEqual(
            $arg2,
            $this->bookbeat->getAvgRating()
        );
    }

    /**
     * @Given there is a :arg1 which is listed on Amazon
     */
    public function thereIsAWhichIsListedOnAmazon2($arg1)
    {
        $this->bookbeat->setBookTitle($arg1);
    }

    /**
     * @Given there is a file :arg1 with ISBN numbers
     */
    public function thereIsAFileWithIsbnNumbers($arg1)
    {
		$this->bookbeatjson->setFilename($arg1);
		$this->bookbeatlist->setBookBeatJSON($this->bookbeatjson);
		$this->bookbeatlist->resetJSON();
		$this->bookbeatlist->addBook("978-1473853331","1473853338", true, "Geri Walton");
		$this->bookbeatlist->addBook("978-0385489492","0385489498", false, "Antonia Fraser");
    }

    /**
     * @When I verify the file :arg1
     */
    public function iVerifyTheFile($arg1)
    {
        $this->bookbeatjson->verifyJSON($arg1);
    }

    /**
     * @Then I should see ISBN numbers of greater or equal than :arg1 and less or equal :arg2
     */
    public function iShouldSeeIsbnNumbersOfGreaterOrEqualThanAndLessOrEqual($arg1, $arg2)
    {
        PHPUnit_Framework_Assert::assertGreaterThanOrEqual(
            $arg1,
            $this->bookbeatjson->countBooks()
        );
        PHPUnit_Framework_Assert::assertLessThanOrEqual(
            $arg2,
            $this->bookbeatjson->countBooks()
        );
    }

    /**
     * @Then I should see each ISBN digits of greater or equal than :arg1 and less or equal :arg2
     */
    public function iShouldSeeEachIsbnDigitsOfGreaterOrEqualThanAndLessOrEqual($arg1, $arg2)
    {
        PHPUnit_Framework_Assert::assertGreaterThanOrEqual(
            $arg1,
            $this->bookbeatjson->countLeastIsbnDigits()
        );
        PHPUnit_Framework_Assert::assertLessThanOrEqual(
            $arg2,
            $this->bookbeatjson->countMostIsbnDigits()
        );
    }

    /**
     * @Then I should see each ISBN has ASIN
     */
    public function iShouldSeeEachIsbnHasAsin()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatjson->countBooks(),
            $this->bookbeatjson->countAsin()
        );
    }

    /**
     * @Then I should see at least :arg1 author's book in the list
     */
    public function iShouldSeeAtLeastAuthorSBookInTheList($arg1)
    {
        PHPUnit_Framework_Assert::assertGreaterThanOrEqual(
            $arg1,
            $this->bookbeatjson->countAuthorSBook()
        );
    }

    /**
     * @When I pull the sales rank
     */
    public function iPullTheSalesRank()
    {
		$this->bookbeatlist->updateSalesRank();
    }

    /**
     * @Then I should see the sales rank of each book
     */
    public function iShouldSeeTheSalesRankOfEachBook()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatlist->countBooks(),
            $this->bookbeatlist->countSalesRanks("amazon")
        );
	}

    /**
     * @Then the sales rank should be integer
     */
    public function theSalesRankShouldBeInteger()
    {
        PHPUnit_Framework_Assert::assertContainsOnly(
            "integer",
            $this->bookbeatlist->getAllRanks("amazon")
        );
    }

    /**
     * @Then I should see number of reviews
     */
    public function iShouldSeeNumberOfReviews()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatlist->countBooks(),
            $this->bookbeatlist->countNumberofReviews("amazon")
        );
    }

    /**
     * @Then the number of reviews should be integer
     */
    public function theNumberOfReviewsShouldBeInteger()
    {
        PHPUnit_Framework_Assert::assertContainsOnly(
            "integer",
            $this->bookbeatlist->getAllReviews("amazon")
        );
    }

    /**
     * @Then I should see average ratings
     */
    public function iShouldSeeAverageRatings()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatlist->countBooks(),
            $this->bookbeatlist->countAvgRatings("amazon")
        );
    }

    /**
     * @Then the average rating should be float
     */
    public function theAverageRatingShouldBeFloat()
    {
        PHPUnit_Framework_Assert::assertContainsOnly(
            "float",
            $this->bookbeatlist->getAllRatings("amazon")
        );
    }

    /**
     * @Then the list of book should be ranked by sales rank
     */
    public function theListOfBookShouldBeRankedBySalesRank()
    {
        throw new PendingException();
    }

    /**
     * @When I sort the order by :arg1
     */
    public function iSortTheOrderBy($arg1)
    {
        throw new PendingException();
    }

    /**
     * @Then I should see the books are sorted by :arg1
     */
    public function iShouldSeeTheBooksAreSortedBy($arg1)
    {
        throw new PendingException();
    }


    /**
     * @When I clean the booklist
     */
    public function iCleanTheBooklist()
    {
        $this->bookbeatlist->resetJSON();
    }

    /**
     * @Then I should see the file has :arg1 books
     */
    public function iShouldSeeTheFileHasBooks($arg1)
    {
        PHPUnit_Framework_Assert::assertEquals(
			0,
            $this->bookbeatlist->countBooks()
        );
    }

    /**
     * @When I add with isbn :arg1, asin :arg2, author name :arg3 and is author :arg4
     */
    public function iAddWithIsbnAsinAuthorNameAndIsAuthor($arg1, $arg2, $arg3, $arg4)
    {
        $this->bookbeatlist->addBook($arg1,$arg2,$arg4,$arg3);
    }

    /**
     * @Then I should see the file has isbn :arg1, asin :arg2, author name :arg3 and is author :arg4
     */
    public function iShouldSeeTheFileHasIsbnAsinAuthorNameAndIsAuthor($arg1, $arg2, $arg3, $arg4)
    {
        PHPUnit_Framework_Assert::assertSame(
			$this->bookbeatlist->getBookbyIsbn($arg1)->{"asin"},
            $arg2
        );
        PHPUnit_Framework_Assert::assertSame(
			$this->bookbeatlist->getBookbyIsbn($arg1)->{"is_author"},
            boolval($arg4)
        );
        PHPUnit_Framework_Assert::assertSame(
			$this->bookbeatlist->getBookbyIsbn($arg1)->{"author_name"},
            $arg3
        );
    }

    /**
     * @When I edit book with isbn :arg1, asin :arg2, author name :arg3 and is author :arg4
     */
    public function iEditBookWithIsbnAsinAuthorNameAndIsAuthor($arg1, $arg2, $arg3, $arg4)
    {
        $this->bookbeatlist->updateBook($arg1,$arg2,$arg4,$arg3);
    }

    /**
     * @Given the file has isbn :arg1
     */
    public function theFileHasIsbn($arg1)
    {
        $this->book = $this->bookbeatlist->getBookbyIsbn($arg1);
		if ($this->book->{"isbn"}!=$arg1){
			$this->bookbeatlist->addBook($arg1,"","","");
		}
    }

    /**
     * @When I load book isbn :arg1
     */
    public function iLoadBookIsbn($arg1)
    {
        $this->book = $this->bookbeatlist->getBookbyIsbn($arg1);
    }

    /**
     * @Then I should get asin :arg1, author name :arg2, is author :arg3
     */
    public function iShouldGetAsinAuthorNameIsAuthor($arg1, $arg2, $arg3)
    {
        PHPUnit_Framework_Assert::assertSame(
			$this->book->{"asin"},
            $arg1
        );
        PHPUnit_Framework_Assert::assertSame(
			$this->book->{"author_name"},
            $arg2
        );
        PHPUnit_Framework_Assert::assertSame(
			$this->book->{"is_author"},
            boolval($arg3)
        );
    }

    /**
     * @When I load all books
     */
    public function iLoadAllBooks()
    {
        $this->books = $this->bookbeatlist->getBooks();
    }

    /**
     * @Then I should get all isbns, asins, author names and is authors
     */
    public function iShouldGetAllIsbnsAsinsAuthorNamesAndIsAuthors()
    {
        PHPUnit_Framework_Assert::assertSame(
			$this->bookbeatlist->getBooks(),
            $this->books
        );
    }

    /**
     * @Then I should see a timestamp
     */
    public function iShouldSeeATimestamp()
    {
        PHPUnit_Framework_Assert::assertTrue(
            !empty($this->bookbeatlist->getTimestamp())
        );
    }

    /**
     * @Then the delta timestamp should be positive integer
     */
    public function theDeltaTimestampShouldBePositiveInteger()
    {
		date_default_timezone_set('America/New_York');
		$date = new DateTime($this->bookbeatlist->getTimestamp());
		$now = new DateTime(date("Y-m-d H:i:s"));
        PHPUnit_Framework_Assert::assertGreaterThanOrEqual(
			0,
            date_diff($date,$now)->format("%s")
        );
    }

    /**
     * @When I pull the sales rank from JSON cache
     */
    public function iPullTheSalesRankFromJsonCache()
    {
		$this->bookbeatlist->updateSalesRank();
		$this->bookbeatlist->updateSalesRankFromJSON();
    }

    /**
     * @When I pull the sales rank from Amazon UK
     */
    public function iPullTheSalesRankFromAmazonUk()
    {
		$this->bookbeatlist->updateSalesRank("amazon");
		$this->bookbeatlist->updateSalesRank("amazon_uk");
    }

    /**
     * @Then I should see the sales rank of each book from Amazon UK
     */
    public function iShouldSeeTheSalesRankOfEachBookFromAmazonUk()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatlist->countBooks(),
            $this->bookbeatlist->countAvgRatings("amazon_uk")
        );
    }

    /**
     * @Then the sales rank should be integer from Amazon UK
     */
    public function theSalesRankShouldBeIntegerFromAmazonUk()
    {
        PHPUnit_Framework_Assert::assertContainsOnly(
            "integer",
            $this->bookbeatlist->getAllRanks("amazon_uk")
        );
    }

    /**
     * @Then I should see number of reviews from Amazon UK
     */
    public function iShouldSeeNumberOfReviewsFromAmazonUk()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatlist->countBooks(),
            $this->bookbeatlist->countNumberofReviews("amazon_uk")
        );
    }

    /**
     * @Then the number of reviews should be integer from Amazon UK
     */
    public function theNumberOfReviewsShouldBeIntegerFromAmazonUk()
    {
        PHPUnit_Framework_Assert::assertContainsOnly(
            "integer",
            $this->bookbeatlist->getAllReviews("amazon_uk")
        );
    }

    /**
     * @Then I should see average ratings from Amazon UK
     */
    public function iShouldSeeAverageRatingsFromAmazonUk()
    {
        PHPUnit_Framework_Assert::assertEquals(
            $this->bookbeatlist->countBooks(),
            $this->bookbeatlist->countAvgRatings("amazon_uk")
        );
    }

    /**
     * @Then the average rating should be float from Amazon UK
     */
    public function theAverageRatingShouldBeFloatFromAmazonUk()
    {
        PHPUnit_Framework_Assert::assertContainsOnly(
            "float",
            $this->bookbeatlist->getAllRatings("amazon_uk")
        );
    }

    /**
     * @Given The author searches for a book
     */
    public function theAuthorSearchesForABook()
    {
        PHPUnit_Framework_Assert::assertInstanceOf(BookBeatSearch::class, $this->bookbeatsearch);
        $this->bookbeatsearch->clearSearch();
        PHPUnit_Framework_Assert::assertSame("",$this->bookbeatsearch->getSearchResultsXML());
    }

    /**
     * @When I search for :arg1
     */
    public function iSearchFor($arg1)
    {
		$this->bookbeatsearch->BookSearch($arg1);        
      //echo $this->bookbeatsearch->getSearchResultsXML(); 
    }

    /**
     * @Given the author searches for an ISBN
     */
    public function theAuthorSearchesForAnIsbn()
    {
        PHPUnit_Framework_Assert::assertInstanceOf(BookBeatSearch::class, $this->bookbeatsearch);
        $this->bookbeatsearch->clearSearch();
        PHPUnit_Framework_Assert::assertSame("",$this->bookbeatsearch->getSearchResultsXML());
    }

    /**
     * @Then Search results return ASIN :arg1
     */
    public function searchResultsReturnAsin($arg1)
    {
         $results = $this->bookbeatsearch->getSearchResultsXML();
        $bookASIN = $results->Items->Item->ASIN->__toString();
        PHPUnit_Framework_Assert::assertSame($arg1,$bookASIN);
    }

    /**
     * @Given the author searches for an Author
     */
    public function theAuthorSearchesForAnAuthor()
    {
        PHPUnit_Framework_Assert::assertInstanceOf(BookBeatSearch::class, $this->bookbeatsearch);
        $this->bookbeatsearch->clearSearch();
        PHPUnit_Framework_Assert::assertSame("",$this->bookbeatsearch->getSearchResultsXML());
    }

    /**
     * @Then Search results return ISBN :arg1
     */
    public function searchResultsReturnIsbn($arg1)
    {
        $results = $this->bookbeatsearch->getSearchResultsXML();
        $bookISBN = $results->Items->Item->ItemAttributes->ISBN->__toString();
        PHPUnit_Framework_Assert::assertSame($arg1,$bookISBN);
    }


}
