Feature: BB1
  As an author
  I want to find out about tools that can help my book online, in order to help my book sales.

  Scenario: Find out about tools                               # features/bb1.feature:5
    Given I am online                                          # FeatureContext::iAmOnline()
      TODO: write pending definition
    And I search for tools that can help my book sales         # FeatureContext::iSearchForToolsThatCanHelpMyBookSales()
    When I google search for bookbeat                          # FeatureContext::iGoogleSearchForBookbeat()
    And I view the page                                        # FeatureContext::iViewThePage()
    Then I should have the bookbeat website describing its app # FeatureContext::iShouldHaveTheBookbeatWebsiteDescribingItsApp()

Feature: BB2
  As an author
  I can see data that helps me understand what my sales are to better rank my work.

  Scenario: See data that helps me understand my sales                                                                                               # features/bb2.feature:5
    Given there is a "The Cucumber Book: Behaviour-Driven Development for Testers and Developers (Pragmatic Programmers)", which is listed on Amazon # FeatureContext::thereIsAWhichIsListedOnAmazon()
    When I view the BookBeat page                                                                                                                    # FeatureContext::iViewTheBookbeatPage()
      │ <H1>Book Result</H1>Book Title: The Cucumber Book: Behaviour-Driven Development for Testers and Developers (Pragmatic Programmers)<br />Sales Rank: 306498<br />Number of Reviews: 24<br />Average Rating: 4.4<br />
    Then I should see "The Cucumber Book: Behaviour-Driven Development for Testers and Developers (Pragmatic Programmers)"                           # FeatureContext::iShouldSee()
    And I should see the Amazon sales rank of greater than 0                                                                                         # FeatureContext::iShouldSeeTheAmazonSalesRankOfGreaterThan()
    And I should see the number of reviews of 0 or greater                                                                                           # FeatureContext::iShouldSeeTheNumberOfReviewsOfOrGreater()
    And I should see the average rating of greater or equal than 0 and less or equal 5                                                               # FeatureContext::iShouldSeeTheAverageRatingOfGreaterOrEqualThanAndLessOrEqual()

  Scenario: See data that helps me understand my sales                                                                       # features/bb2.feature:14
    Given there is a "BDD in Action: Behavior-driven development for the whole software lifecycle" which is listed on Amazon # FeatureContext::thereIsAWhichIsListedOnAmazon2()
    When I view the BookBeat page                                                                                            # FeatureContext::iViewTheBookbeatPage()
      │ <H1>Book Result</H1>Book Title: BDD in Action: Behavior-driven development for the whole software lifecycle<br />Sales Rank: 532848<br />Number of Reviews: 29<br />Average Rating: 4.6<br />
    Then I should see "BDD in Action: Behavior-driven development for the whole software lifecycle"                          # FeatureContext::iShouldSee()
    And I should see the Amazon sales rank of greater than 0                                                                 # FeatureContext::iShouldSeeTheAmazonSalesRankOfGreaterThan()
    And I should see the number of reviews of 0 or greater                                                                   # FeatureContext::iShouldSeeTheNumberOfReviewsOfOrGreater()
    And I should see the average rating of greater or equal than 0 and less or equal 5                                       # FeatureContext::iShouldSeeTheAverageRatingOfGreaterOrEqualThanAndLessOrEqual()

Feature: BB3
  As an author I can specify books in order to see their stats

  Scenario: The Author can specify books by ISBN                                       # features/bb3.feature:4
    Given there is a file "booklist.json" with ISBN numbers                            # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I verify the file "booklist.json"                                             # FeatureContext::iVerifyTheFile()
    Then I should see ISBN numbers of greater or equal than 2 and less or equal 10     # FeatureContext::iShouldSeeIsbnNumbersOfGreaterOrEqualThanAndLessOrEqual()
    And I should see each ISBN digits of greater or equal than 10 and less or equal 13 # FeatureContext::iShouldSeeEachIsbnDigitsOfGreaterOrEqualThanAndLessOrEqual()
    And I should see each ISBN has ASIN                                                # FeatureContext::iShouldSeeEachIsbnHasAsin()
    And I should see at least 1 author's book in the list                              # FeatureContext::iShouldSeeAtLeastAuthorSBookInTheList()

Feature: BB4
  As an author I want to be able to see my book’ rank against other books to know how I am doing via Amazon sales data

  Scenario: The Author can pull sales rank of the Author's selected books # features/bb4.feature:4
    Given there is a file "booklist.json" with ISBN numbers               # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I pull the sales rank                                            # FeatureContext::iPullTheSalesRank()
    Then I should see the sales rank of each book                         # FeatureContext::iShouldSeeTheSalesRankOfEachBook()
    And the sales rank should be integer                                  # FeatureContext::theSalesRankShouldBeInteger()
    And I should see number of reviews                                    # FeatureContext::iShouldSeeNumberOfReviews()
    And the number of reviews should be integer                           # FeatureContext::theNumberOfReviewsShouldBeInteger()
    And I should see average ratings                                      # FeatureContext::iShouldSeeAverageRatings()
    And the average rating should be float                                # FeatureContext::theAverageRatingShouldBeFloat()
    And I should see a timestamp                                          # FeatureContext::iShouldSeeATimestamp()
    And the delta timestamp should be positive integer                    # FeatureContext::theDeltaTimestampShouldBePositiveInteger()

  Scenario: The Author can pull sales rank of the Author's selected books from JSON cache # features/bb4.feature:16
    Given there is a file "booklist.json" with ISBN numbers                               # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I pull the sales rank from JSON cache                                            # FeatureContext::iPullTheSalesRankFromJsonCache()
    Then I should see the sales rank of each book                                         # FeatureContext::iShouldSeeTheSalesRankOfEachBook()
    And the sales rank should be integer                                                  # FeatureContext::theSalesRankShouldBeInteger()
    And I should see number of reviews                                                    # FeatureContext::iShouldSeeNumberOfReviews()
    And the number of reviews should be integer                                           # FeatureContext::theNumberOfReviewsShouldBeInteger()
    And I should see average ratings                                                      # FeatureContext::iShouldSeeAverageRatings()
    And the average rating should be float                                                # FeatureContext::theAverageRatingShouldBeFloat()
    And I should see a timestamp                                                          # FeatureContext::iShouldSeeATimestamp()
    And the delta timestamp should be positive integer                                    # FeatureContext::theDeltaTimestampShouldBePositiveInteger()

Feature: BB5
  As an author, I can sort the rankings to see how the rankings are via Amazon sales data (sub-group)

  Scenario: The Author can sort the rank by sales rank      # features/bb5.feature:4
    Given there is a file "booklist.json" with ISBN numbers # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I sort the order by "sales rank"                   # FeatureContext::iSortTheOrderBy()
      TODO: write pending definition
    Then I should see the books are sorted by "sales rank"  # FeatureContext::iShouldSeeTheBooksAreSortedBy()

  Scenario: The Author can sort the rank by reviews         # features/bb5.feature:9
    Given there is a file "booklist.json" with ISBN numbers # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I sort the order by "reviews"                      # FeatureContext::iSortTheOrderBy()
      TODO: write pending definition
    Then I should see the books are sorted by "reviews"     # FeatureContext::iShouldSeeTheBooksAreSortedBy()

  Scenario: The Author can sort the rank by average rating      # features/bb5.feature:14
    Given there is a file "booklist.json" with ISBN numbers     # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I sort the order by "average ratings"                  # FeatureContext::iSortTheOrderBy()
      TODO: write pending definition
    Then I should see the books are sorted by "average ratings" # FeatureContext::iShouldSeeTheBooksAreSortedBy()

  Scenario: The Author can sort the rank by book title      # features/bb5.feature:19
    Given there is a file "booklist.json" with ISBN numbers # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I sort the order by "book title"                   # FeatureContext::iSortTheOrderBy()
      TODO: write pending definition
    Then I should see the books are sorted by "book title"  # FeatureContext::iShouldSeeTheBooksAreSortedBy()

  Scenario: The Author can sort the rank by author          # features/bb5.feature:24
    Given there is a file "booklist.json" with ISBN numbers # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I sort the order by "author"                       # FeatureContext::iSortTheOrderBy()
      TODO: write pending definition
    Then I should see the books are sorted by "author"      # FeatureContext::iShouldSeeTheBooksAreSortedBy()

Feature: BB6-2
  In order to add new books to my watch list
  As an author
  I need to be able to search for books

  Scenario: The Author search Amazon by book title.                                             # features/bb6-2.feature:6
    Given The author searches for a book                                                        # FeatureContext::theAuthorSearchesForABook()
    When I search for "I Love You Madly: Marie-Antoinette and Count Fersen: The Secret Letters" # FeatureContext::iSearchFor()
    Then Search results return ISBN "0720618770"                                                # FeatureContext::searchResultsReturnIsbn()

  Scenario: The Author can search Amazon by ISBN # features/bb6-2.feature:11
    Given the author searches for an ISBN        # FeatureContext::theAuthorSearchesForAnIsbn()
    When I search for "1606064835"               # FeatureContext::iSearchFor()
    Then Search results return ASIN "1606064835" # FeatureContext::searchResultsReturnAsin()

  Scenario: The Author can search Amazon by Author # features/bb6-2.feature:16
    Given the author searches for an Author        # FeatureContext::theAuthorSearchesForAnAuthor()
    When I search for "Geri Walton"                # FeatureContext::iSearchFor()
    Then Search results return ISBN "1473853338"   # FeatureContext::searchResultsReturnIsbn()

  Scenario: The Search results are returned as an HTML table # features/bb6-2.feature:21
    Given The author searches for a book                     # FeatureContext::theAuthorSearchesForABook()
    When I search for "Windows 10 For Seniors For Dummies"   # FeatureContext::iSearchFor()
    Then search results return a HTML table                  # FeatureContext::searchResultsReturnAHtmlTable()

Feature: BB6
  As an author I can edit, and reload sets of books through the website interface

  Scenario: The Author can clean the booklist               # features/bb6.feature:4
    Given there is a file "booklist.json" with ISBN numbers # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I clean the booklist                               # FeatureContext::iCleanTheBooklist()
    Then I should see the file has "0" books                # FeatureContext::iShouldSeeTheFileHasBooks()

  Scenario: The Author can add a book                                                                                       # features/bb6.feature:9
    Given there is a file "booklist.json" with ISBN numbers                                                                 # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I add with isbn "978-1473853331", asin "1473853338", author name "Geri Walton" and is author "true"                # FeatureContext::iAddWithIsbnAsinAuthorNameAndIsAuthor()
    Then I should see the file has isbn "978-1473853331", asin "1473853338", author name "Geri Walton" and is author "true" # FeatureContext::iShouldSeeTheFileHasIsbnAsinAuthorNameAndIsAuthor()

  Scenario: The Author can edit a book by isbn                                                                              # features/bb6.feature:14
    Given there is a file "booklist.json" with ISBN numbers                                                                 # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I edit book with isbn "978-1473853331", asin "1473853338", author name "Geri Walton" and is author "true"          # FeatureContext::iEditBookWithIsbnAsinAuthorNameAndIsAuthor()
    Then I should see the file has isbn "978-1473853331", asin "1473853338", author name "Geri Walton" and is author "true" # FeatureContext::iShouldSeeTheFileHasIsbnAsinAuthorNameAndIsAuthor()

  Scenario: The Author can load a book data                                          # features/bb6.feature:19
    Given there is a file "booklist.json" with ISBN numbers                          # FeatureContext::thereIsAFileWithIsbnNumbers()
    And the file has isbn "978-1473853331"                                           # FeatureContext::theFileHasIsbn()
    When I load book isbn "978-1473853331"                                           # FeatureContext::iLoadBookIsbn()
    Then I should get asin "1473853338", author name "Geri Walton", is author "true" # FeatureContext::iShouldGetAsinAuthorNameIsAuthor()

  Scenario: The Author can load sets of books                       # features/bb6.feature:25
    Given there is a file "booklist.json" with ISBN numbers         # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I load all books                                           # FeatureContext::iLoadAllBooks()
    Then I should get all isbns, asins, author names and is authors # FeatureContext::iShouldGetAllIsbnsAsinsAuthorNamesAndIsAuthors()

Feature: BB7
  As an author I want to be able to see my book’ number reviewers, sales rank, ratings and comments via Amazon UK

  Scenario: The Author can pull sales rank of the Author's selected books from Amazon UK # features/bb7.feature:4
    Given there is a file "booklist.json" with ISBN numbers                              # FeatureContext::thereIsAFileWithIsbnNumbers()
    When I pull the sales rank from Amazon UK                                            # FeatureContext::iPullTheSalesRankFromAmazonUk()
      Warning: file_get_contents(https://webservices.amazon.co.uk/onca/xml?AWSAccessKeyId=AKIAJEMFMZIACWATMEYA&AssociateTag=bookbeatapp-20&IncludeReviewsSummary=1&ItemId=1473853338&Operation=ItemLookup&ResponseGroup=ItemAttributes%2CSalesRank%2CReviews&Service=AWSECommerceService&Timestamp=2016-12-05T22%3A21%3A10Z&Signature=pgBUMO0UOBIUdm%2BfNXuYvB1iCQb9vTdXQSzvZipueP8%3D): failed to open stream: HTTP request failed! HTTP/1.1 503 Service Unavailable
       in features/bootstrap/BookBeat.php line 388
    Then I should see the sales rank of each book from Amazon UK                         # FeatureContext::iShouldSeeTheSalesRankOfEachBookFromAmazonUk()
    And the sales rank should be integer from Amazon UK                                  # FeatureContext::theSalesRankShouldBeIntegerFromAmazonUk()
    And I should see number of reviews from Amazon UK                                    # FeatureContext::iShouldSeeNumberOfReviewsFromAmazonUk()
    And the number of reviews should be integer from Amazon UK                           # FeatureContext::theNumberOfReviewsShouldBeIntegerFromAmazonUk()
    And I should see average ratings from Amazon UK                                      # FeatureContext::iShouldSeeAverageRatingsFromAmazonUk()
    And the average rating should be float from Amazon UK                                # FeatureContext::theAverageRatingShouldBeFloatFromAmazonUk()
    And I should see a timestamp                                                         # FeatureContext::iShouldSeeATimestamp()
    And the delta timestamp should be positive integer                                   # FeatureContext::theDeltaTimestampShouldBePositiveInteger()

--- Failed scenarios:

    features/bb7.feature:4

21 scenarios (14 passed, 1 failed, 6 pending)
96 steps (72 passed, 1 failed, 6 pending, 17 skipped)
0m9.34s (7.85Mb)
